@mixin br($radius) {
    border-radius: $radius;
}

@mixin rotate($var) {
    transform: rotate($var + deg);
}

@mixin scale($var) {
    transform: scale($var);
}

@mixin blur($var) {
    filter: blur($var);
}

@mixin smooth-scroll {
    -webkit-overflow-scrolling: touch;
}

@mixin smooth-font {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin gpu {
    transform: translate3d(0, 0, 0);
}

//gradient
@mixin gp($position, $color1, $color2) {
    background-image: linear-gradient($position, $color1, $color2);
}

@mixin cover {
    background-repeat: no-repeat;
    background-position: 50% 50%;
    background-size: cover;
}

@mixin bgFixed {
    background-repeat: no-repeat;
    background-position: 50% 50%;
    background-size: contain;
    background-attachment: fixed;
}

@mixin coverdiv {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

//transform: translateY
@mixin tY($var) {
    transform: translateY($var);
}

//transform: translateX
@mixin tX($var) {
    transform: translateX($var);
}

//transition
@mixin tr($time: 0.35s, $what: all, $why: ease) {
    -webkit-transition: $what $time $why;
    -moz-transition: $what $time $why;
    -ms-transition: $what $time $why;
    -o-transition: $what $time $why;
    transition: $what $time $why;
}

//text-overflow
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin text-overflow-column($count-column: 2) {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $count-column;
}

//Counter
@mixin counter($var) {
    counter-reset: $var;

    & > li,
    & > dt {
        &::before {
            content: counter($var);
            counter-increment: $var;
        }
    }
}

@mixin placeholder {
    &::-moz-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &::placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }
}

@mixin user-select-none {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

//No select
@mixin noselect {
    touch-action: none;
    @include user-select-none;
}

//Scroll
@mixin scroll {
    overflow-y: auto;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
}

//Scroll Bar
@mixin scrollbar {
    &::-webkit-scrollbar {
        @content;
    }
}
@mixin scrollbar-track {
    &::-webkit-scrollbar-track {
        @content;
    }
}
@mixin scrollbar-thumb {
    &::-webkit-scrollbar-thumb {
        @content;
    }
}
@mixin scrollbar-track-piece {
    &::-webkit-scrollbar-track-piece {
        @content;
    }
}

@mixin border-item {
    position: relative;

    &::before,
    &::after {
        content: '';
        position: absolute;
        right: $base-indent;
        left: $base-indent;
        display: block;
        height: 1px;
        min-height: initial;
        background-color: $color-border--lighten;
    }

    &::before {
        top: 0;
    }

    &::after {
        bottom: 0;
    }
}

//Triangle
@mixin arr($width, $height, $bg, $direction) {
    width: 0;
    height: 0;
    border-style: solid;
    @if $direction == t {
        border-width: 0 $width * 0.5 + px $height + px $width * 0.5 + px;
        border-color: transparent transparent $bg transparent;
    }
    @if $direction == r {
        border-width: $height * 0.5 + px 0 $height * 0.5 + px $width + px;
        border-color: transparent transparent transparent $bg;
    }
    @if $direction == b {
        border-width: $height + px $width * 0.5 + px 0 $width * 0.5 + px;
        border-color: $bg transparent transparent transparent;
    }
    @if $direction == l {
        border-width: $height * 0.5 + px $width + px $height * 0.5 + px 0;
        border-color: transparent $bg transparent transparent;
    }
    @if $direction == tl {
        border-width: $height + px $width + px 0 0;
        border-color: $bg transparent transparent transparent;
    }
    @if $direction == tr {
        border-width: 0 $width + px $height + px 0;
        border-color: transparent $bg transparent transparent;
    }
    @if $direction == br {
        border-width: 0 0 $height + px $width + px;
        border-color: transparent transparent $bg transparent;
    }
    @if $direction == bl {
        border-width: $width + px 0 0 $height + px;
        border-color: transparent transparent transparent $bg;
    }
}

@mixin centre($axis: 'both') {
    position: absolute;
    @if $axis == 'y' {
        top: 50%;
        transform: translateY(-50%);
    }
    @if $axis == 'x' {
        left: 50%;
        transform: translateX(-50%);
    }
    @if $axis == 'both' {
        top: 50%;
        left: 50%;
        transform: translate(-51%, -50%);
    }
}

@mixin max($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media screen and (max-width: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

@mixin min($breakpoint) {
    @if map-has-key($breakpoints-min, $breakpoint) {
        @media screen and (min-width: #{map-get($breakpoints-min, $breakpoint)}) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Please make sure it is defined in `$breakpoints` map.";
    }
}

@mixin landscape() {
    @media only screen and (min-device-width: 320px) and (max-device-width: 812px) and (orientation: landscape) {
        @content;
    }
}

@mixin set-color-link($color) {
    color: $color;

    &:hover,
    &:active,
    &:focus,
    &:visited {
        color: $color;
    }

}
